---
description: 
globs: 
alwaysApply: false
---
---
description: How to add or edit Cursor rules in our project
globs: 
alwaysApply: false
---
# Cursor Rules Location

How to add new cursor rules to the project
1. Always place rule files in PROJECT_ROOT/.cursor/rules/:
    ```
    .cursor/rules/
    ├── your-rule-name.mdc
    ├── another-rule.mdc
    └── ...
    ```

2. Follow the naming convention:
    - Use kebab-case for filenames
    - Always use .mdc extension
    - Make names descriptive of the rule's purpose

3. Directory structure:
    ```
    PROJECT_ROOT/
    ├── .cursor/
    │   └── rules/
    │       ├── your-rule-name.mdc
    │       └── ...
    └── ...
    ```

4. Never place rule files:
    - In the project root
    - In subdirectories outside .cursor/rules
    - In any other location

5. Cursor rules have the following structure:

````
---
description: Short description of the rule's purpose
globs: optional/path/pattern/**/* 
alwaysApply: false
---
# Rule Title

Main content explaining the rule with markdown formatting.

1. Step-by-step instructions
2. Code examples
3. Guidelines

Example:
```typescript
// Good example
function goodExample() {
  // Implementation following guidelines
}

// Bad example
function badExample() {
  // Implementation not following guidelines
}

---
description: Guidelines for implementing Next.js API routes
globs: 
alwaysApply: false
---
# API Routes

## Standard Format

Use this format for API routes:

```ts
import { z } from "zod";
import { NextResponse } from "next/server";
import { auth } from "@/app/api/auth/[...nextauth]/auth";
import prisma from "@/utils/prisma";
import { withError } from "@/utils/middleware";

const apiNameBody = z.object({ id: z.string(), message: z.string() });
export type ApiNameBody = z.infer<typeof apiNameBody>;
export type UpdateApiNameResponse = Awaited<ReturnType<typeof updateApiName>>;

async function updateApiName(body: ApiNameBody, options: { email: string }) {
  const { email } = options;
  const result = await prisma.table.update({
    where: {
      id: body.id,
      email,
    },
    data: body,
  });

  return { result };
}

// For routes without params
export const POST = withError(async (request: Request) => {
  const session = await auth();
  if (!session?.user.email)
    return NextResponse.json({ error: "Not authenticated" });

  const json = await request.json();
  const body = apiNameBody.parse(json);

  const result = await updateApiName(body, { email: session.user.email });

  return NextResponse.json(result);
});

// For routes with params (note the params promise which is how Next.js 15+ works)
export const GET = withError(
  async (
    request: Request,
    { params }: { params: Promise<{ slug: string }> }
  ) => {
    const session = await auth();
    if (!session?.user.email)
      return NextResponse.json({ error: "Not authenticated" });

    const { slug } = await params;
    // Use the slug parameter...

    return NextResponse.json({ result });
  }
);
```

## Implementation Guidelines

- Use Zod for request body validation
- Create separate functions for business logic
- Wrap route handlers with `withError` middleware
- Always validate authentication with `auth()`
- Export typed responses for client usage
- For routes with dynamic parameters, use the new Next.js 15+ params format with async params
```
````
